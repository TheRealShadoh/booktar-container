name: Build and Deploy Container

on:
  schedule:
    # Check for updates every hour
    - cron: '0 * * * *'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_build:
        description: 'Force build even if no upstream changes'
        required: false
        default: 'false'
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  UPSTREAM_REPO: TheRealShadoh/booktarr

jobs:
  check-upstream:
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check.outputs.should_build }}
      upstream_sha: ${{ steps.check.outputs.upstream_sha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check upstream repository for changes
        id: check
        run: |
          # Install jq for JSON parsing
          sudo apt-get update && sudo apt-get install -y jq
          
          # Get the latest commit SHA from upstream
          echo "Fetching latest commit from ${{ env.UPSTREAM_REPO }}"
          UPSTREAM_RESPONSE=$(curl -s "https://api.github.com/repos/${{ env.UPSTREAM_REPO }}/commits/main")
          
          if [ $? -ne 0 ]; then
            echo "Error: Failed to fetch upstream repository information"
            exit 1
          fi
          
          UPSTREAM_SHA=$(echo "$UPSTREAM_RESPONSE" | jq -r '.sha')
          
          if [ "$UPSTREAM_SHA" == "null" ] || [ -z "$UPSTREAM_SHA" ]; then
            echo "Error: Could not parse upstream SHA from API response"
            echo "API Response: $UPSTREAM_RESPONSE"
            exit 1
          fi
          
          echo "Latest upstream SHA: $UPSTREAM_SHA"
          
          # Check if we have a record of the last built SHA
          LAST_BUILT_SHA=""
          if [ -f .last_built_sha ]; then
            LAST_BUILT_SHA=$(cat .last_built_sha)
            echo "Last built SHA: $LAST_BUILT_SHA"
          else
            echo "No previous build SHA found (.last_built_sha missing)"
          fi
          
          # Determine if we should build
          SHOULD_BUILD="false"
          if [ "${{ github.event.inputs.force_build }}" == "true" ]; then
            echo "Force build requested"
            SHOULD_BUILD="true"
          elif [ "${{ github.event.name }}" == "push" ] || [ "${{ github.event.name }}" == "pull_request" ]; then
            echo "Build triggered by push/PR"
            SHOULD_BUILD="true"
          elif [ "$UPSTREAM_SHA" != "$LAST_BUILT_SHA" ]; then
            echo "Upstream changes detected"
            SHOULD_BUILD="true"
          else
            echo "No upstream changes detected"
          fi
          
          echo "should_build=$SHOULD_BUILD" >> $GITHUB_OUTPUT
          echo "upstream_sha=$UPSTREAM_SHA" >> $GITHUB_OUTPUT

  build-and-push:
    needs: check-upstream
    if: needs.check-upstream.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host
          install: true

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{date 'YYYY-MM-DD'}},enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            REPO_URL=https://github.com/${{ env.UPSTREAM_REPO }}.git
            BRANCH=main
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=registry
        timeout-minutes: 45

      - name: Update last built SHA
        if: github.event.name == 'schedule' || github.event.inputs.force_build == 'true'
        run: |
          echo "${{ needs.check-upstream.outputs.upstream_sha }}" > .last_built_sha
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .last_built_sha
          if ! git diff --staged --quiet; then
            git commit -m "Update last built SHA to ${{ needs.check-upstream.outputs.upstream_sha }}"
            git push || echo "Warning: Could not push SHA update (this is expected for PRs)"
          else
            echo "No changes to commit for SHA update"
          fi

      - name: Generate build summary
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Upstream Repository**: ${{ env.UPSTREAM_REPO }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Upstream SHA**: ${{ needs.check-upstream.outputs.upstream_sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Platforms**: linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger**: ${{ github.event.name }}" >> $GITHUB_STEP_SUMMARY

  test-deployment:
    needs: [check-upstream, build-and-push]
    if: needs.check-upstream.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Test container deployment
        run: |
          # Pull and test the newly built image
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Start container
          docker run -d --name test-booktar \
            -p 8000:8000 \
            -e DATABASE_URL=sqlite:///app/data/test.db \
            -e CACHE_FILE=/app/cache/test.json \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Wait for container to be ready
          sleep 30
          
          # Check if container is running
          if ! docker ps | grep test-booktar; then
            echo "Container failed to start"
            docker logs test-booktar
            exit 1
          fi
          
          # Test basic connectivity
          if curl -f --connect-timeout 10 --max-time 30 http://localhost:8000/ || curl -f --connect-timeout 10 --max-time 30 http://localhost:8000/health; then
            echo "Container is responding"
          else
            echo "Container health check failed"
            docker logs test-booktar
            exit 1
          fi
          
          # Cleanup
          docker stop test-booktar
          docker rm test-booktar